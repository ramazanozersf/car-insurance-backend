name: 🚗 Car Insurance Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pull-requests: write
  issues: write
  checks: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Job 2: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests with coverage
        run: npm run test:docker

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📈 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Job 3: Docker Build and Test
  docker-tests:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-type: [unit-tests, integration-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          target: ${{ matrix.test-type }}
          tags: car-insurance-${{ matrix.test-type }}:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Run ${{ matrix.test-type }}
        run: |
          mkdir -p test-results coverage
          if [ "${{ matrix.test-type }}" = "unit-tests" ]; then
            # Unit tests don't need database services
            docker run --rm \
              -v ${{ github.workspace }}/test-results:/app/test-results \
              -v ${{ github.workspace }}/coverage:/app/coverage \
              car-insurance-${{ matrix.test-type }}:latest
          else
            # Integration tests need database services
            docker-compose -f docker-compose.test.yml --profile ${{ matrix.test-type }} up --build --exit-code-from ${{ matrix.test-type }}
          fi

      - name: 🧹 Cleanup Docker services
        if: always() && matrix.test-type == 'integration-tests'
        run: |
          docker-compose -f docker-compose.test.yml --profile ${{ matrix.test-type }} down -v || true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results/
          retention-days: 7

  # Job 4: Integration Tests with Services
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: car_insurance_test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⏳ Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done'
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: 🔗 Run integration tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: testpassword
          DATABASE_NAME: car_insurance_test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
        run: npm run test:integration

  # Job 5: E2E Tests with Docker Compose
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml --profile all-tests up -d --build
          
      - name: ⏳ Wait for services to be ready
        run: |
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml logs test-db | grep -q "database system is ready"; do sleep 5; done'
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml logs app-test | grep -q "Application is running"; do sleep 5; done'

      - name: 🎭 Run E2E tests
        run: |
          docker-compose -f docker-compose.test.yml --profile e2e-tests up --abort-on-container-exit
          
      - name: 📊 Collect test results
        if: always()
        run: |
          mkdir -p e2e-results
          docker-compose -f docker-compose.test.yml logs e2e-tests > e2e-results/e2e-logs.txt
          docker cp $(docker-compose -f docker-compose.test.yml ps -q e2e-tests):/app/test-results/. e2e-results/ || true

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: e2e-results/
          retention-days: 7

      - name: 🧹 Cleanup Docker Compose
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Job 6: Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=high

      - name: 🐳 Build Docker image for scanning
        run: docker build -t car-insurance-backend:latest .

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'car-insurance-backend:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 7: Build and Push Docker Images
  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-tests, integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 8: Test Results Summary
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📊 Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Unit Tests
          if [ -d "coverage-reports" ]; then
            echo "## ✅ Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "- Status: Passed" >> $GITHUB_STEP_SUMMARY
            echo "- Coverage reports available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Docker Tests
          if [ -d "test-results-unit-tests" ]; then
            echo "## 🐳 Docker Tests" >> $GITHUB_STEP_SUMMARY
            echo "- Unit tests in Docker: Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Integration Tests
          echo "## 🔗 Integration Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "- Status: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # E2E Tests
          echo "## 🎭 E2E Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "- Status: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Test results" >> $GITHUB_STEP_SUMMARY
          echo "- Build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "- Docker images built and pushed to registry" >> $GITHUB_STEP_SUMMARY
            echo "- Ready for deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Merge to main branch to trigger deployment" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 9: Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy notification
        run: |
          echo "🎉 Deployment ready!"
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "All tests passed and image is available for deployment"

      # Add your deployment steps here
      # For example:
      # - Deploy to staging environment
      # - Run smoke tests
      # - Deploy to production
      # - Send notifications
