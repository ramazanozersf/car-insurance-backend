services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: car-insurance-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: car_insurance_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: car-insurance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: car-insurance-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: car_insurance_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_EXPIRATION: 15m
      JWT_REFRESH_EXPIRATION: 7d
      PORT: 3000
      API_PREFIX: api/v1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: car-insurance-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@carinsurance.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    profiles:
      - dev

  # Test Services (run tests against main database)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test-base
    container_name: car-insurance-tests
    environment:
      NODE_ENV: test
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: car_insurance_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-test-jwt-secret-for-docker}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-test-refresh-secret-for-docker}
    volumes:
      - ./coverage:/app/coverage
      - ./test-results:/app/test-results
      - ./scripts:/app/scripts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - car-insurance-network
    profiles:
      - test
    command: ["sh", "/app/scripts/run-all-tests.sh"]

  # Test Results Viewer
  test-results:
    image: nginx:alpine
    container_name: car-insurance-test-results
    ports:
      - "8080:80"
    volumes:
      - ./coverage:/usr/share/nginx/html/coverage:ro
      - ./test-results:/usr/share/nginx/html/test-results:ro
      - ./scripts/nginx-test-results.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - car-insurance-network
    profiles:
      - test
      - test-results
    depends_on:
      - test-runner

      

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: car-insurance-network
